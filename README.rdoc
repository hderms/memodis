= memodis

semi-transparent memoization; backed by redis;
Forked off of: https://github.com/levicook/memodis due to inactivity


Two features:
1. Memodis#memoize
1. Memodis::DistCache
== Example
  require 'memodis'
  require 'benchmark'
  def fib(num)
    return num if num < 2
    fib(num - 1) + fib(num - 2)
  end

  puts "Before memoize: "

  non_memoized = Benchmark.measure do
  puts fib(33) => 3524578 # after ~ 7 seconds
  end
  puts non_memoized




  extend Memodis
  memoize :fib, Memodis::DistCache.new({
    :key_gen => lambda { |k| "fib(#{k})" },
      :decoder => :integer,
      :expires => (10 * 60),
      :master  => '127.0.0.1:6379',
      :slaves  => ['127.0.0.1:6379']
  })
  memoized = []

  memoized << Benchmark.measure do
  puts fib(33) => 3524578 # after ~ 0.03   seconds
  end
  memoized <<  Benchmark.measure do
  puts fib(33) => 3524578 # after ~ 0.0001 seconds
  end

  memoized << Benchmark.measure do
  puts fib(33) => 3524578 # after ~ 0.0001 seconds
  end
  puts "After memoize: "
  puts memoized.join("\n")
== Background
1. http://blog.grayproductions.net/articles/caching_and_memoization
1. http://code.google.com/p/redis & http://github.com/ezmobius/redis-rb

== Important Moving Parts
1. http://code.google.com/p/redis/wiki/GetCommand
1. http://code.google.com/p/redis/wiki/SetCommand
1. http://code.google.com/p/redis/wiki/SetnxCommand

== Note on Patches/Pull Requests

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 levicook@gmail.com. See LICENSE for details.
